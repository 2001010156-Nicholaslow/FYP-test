{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\1\\\\FYP-test\\\\client\\\\src\\\\Pages\\\\Users\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TableIcons from \"../../Components/MaterialTablesIcons/TablesIcons\";\nimport MaterialTable from \"material-table\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Users() {\n  _s();\n\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [reload, setReload] = useState(false);\n\n  const updateusers = (user_id, full_name, email, education, contact_number, gender, citizenship, address, postalcode, country) => {\n    Axios.put(\"http://localhost:3001/admin_update_users\", {\n      user_id: user_id,\n      full_name: full_name,\n      email: email,\n      education: education,\n      contact_number: contact_number,\n      gender: gender,\n      citizenship: citizenship,\n      address: address,\n      postalcode: postalcode,\n      country: country\n    }).then(response => {\n      alert(\"Updated\");\n      setReload(!reload);\n    });\n  };\n\n  const deleteusers = user_id => {\n    Axios.put(\"http://localhost:3001/admin_delete_users\", {\n      user_id: user_id\n    }).then(response => {\n      alert(\"Deleted\");\n      setReload(!reload);\n    });\n  };\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/admin_get_users\").then(response => {\n      setData(response.data);\n    });\n  }, []);\n  const [columns, setColumns] = useState([{\n    title: \"Full Name\",\n    field: \"full_name\",\n    filtering: false\n  }, {\n    title: \"Email\",\n    field: \"email\",\n    filtering: false\n  }, {\n    title: \"Date of birth\",\n    field: \"dob\",\n    editable: \"never\",\n    filtering: false,\n    render: rowData => moment(rowData.dob).format(\"YYYY/MM/DD\")\n  }, {\n    title: \"Education\",\n    field: \"education\"\n  }, {\n    title: \"Contact Number\",\n    field: \"contact_number\",\n    filtering: false\n  }, {\n    title: \"Gender\",\n    field: \"gender\"\n  }, {\n    title: \"Citizenship\",\n    field: \"citizenship\"\n  }, {\n    title: \"Address\",\n    field: \"address\",\n    filtering: false\n  }, {\n    title: \"Postal Code\",\n    field: \"postalcode\",\n    filtering: false\n  }, {\n    title: \"Country\",\n    field: \"country\"\n  }]);\n  return /*#__PURE__*/_jsxDEV(MaterialTable, {\n    icons: TableIcons,\n    title: \" Manage Users\",\n    columns: columns,\n    data: data,\n    options: {\n      filtering: true\n    },\n    editable: {\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData;\n          setData([...dataUpdate]);\n          updateusers(newData.user_id, newData.full_name, newData.email, newData.education, newData.contact_number, newData.gender, newData.citizenship, newData.address, newData.postalcode, newData.country);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          deleteusers(oldData.user_id);\n          dataDelete.splice(index, 1);\n          setData([...dataDelete]);\n          resolve();\n        }, 1000);\n      })\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Users, \"ZBeyTP2948r97Tc8wJAza3s5f0o=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","useEffect","TableIcons","MaterialTable","Axios","moment","useNavigate","Users","navigate","data","setData","reload","setReload","updateusers","user_id","full_name","email","education","contact_number","gender","citizenship","address","postalcode","country","put","then","response","alert","deleteusers","get","columns","setColumns","title","field","filtering","editable","render","rowData","dob","format","onRowUpdate","newData","oldData","Promise","resolve","reject","setTimeout","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice"],"sources":["D:/Github/1/FYP-test/client/src/Pages/Users/Users.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TableIcons from \"../../Components/MaterialTablesIcons/TablesIcons\";\r\nimport MaterialTable from \"material-table\";\r\nimport Axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nfunction Users() {\r\n  const navigate = useNavigate();\r\n  const [data, setData] = useState([]);\r\n  const [reload, setReload] = useState(false);\r\n\r\n  const updateusers = (\r\n    user_id,\r\n    full_name,\r\n    email,\r\n    education,\r\n    contact_number,\r\n    gender,\r\n    citizenship,\r\n    address,\r\n    postalcode,\r\n    country\r\n  ) => {\r\n    Axios.put(\"http://localhost:3001/admin_update_users\", {\r\n      user_id: user_id,\r\n      full_name: full_name,\r\n      email: email,\r\n      education: education,\r\n      contact_number: contact_number,\r\n      gender: gender,\r\n      citizenship: citizenship,\r\n      address: address,\r\n      postalcode: postalcode,\r\n      country: country,\r\n    }).then((response) => {\r\n      alert(\"Updated\");\r\n      setReload(!reload);\r\n    });\r\n  };\r\n\r\n  const deleteusers = (user_id) => {\r\n    Axios.put(\"http://localhost:3001/admin_delete_users\", {\r\n      user_id: user_id,\r\n    }).then((response) => {\r\n      alert(\"Deleted\");\r\n      setReload(!reload);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/admin_get_users\").then((response) => {\r\n      setData(response.data);\r\n    });\r\n  }, []);\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: \"Full Name\", field: \"full_name\", filtering: false },\r\n    {\r\n      title: \"Email\",\r\n      field: \"email\",\r\n      filtering: false,\r\n    },\r\n    {\r\n      title: \"Date of birth\",\r\n      field: \"dob\",\r\n      editable: \"never\",\r\n      filtering: false,\r\n      render: (rowData) => moment(rowData.dob).format(\"YYYY/MM/DD\"),\r\n    },\r\n    {\r\n      title: \"Education\",\r\n      field: \"education\",\r\n    },\r\n    {\r\n      title: \"Contact Number\",\r\n      field: \"contact_number\",\r\n      filtering: false,\r\n    },\r\n    {\r\n      title: \"Gender\",\r\n      field: \"gender\",\r\n    },\r\n    {\r\n      title: \"Citizenship\",\r\n      field: \"citizenship\",\r\n    },\r\n    {\r\n      title: \"Address\",\r\n      field: \"address\",\r\n      filtering: false,\r\n    },\r\n    {\r\n      title: \"Postal Code\",\r\n      field: \"postalcode\",\r\n      filtering: false,\r\n    },\r\n    {\r\n      title: \"Country\",\r\n      field: \"country\",\r\n    },\r\n  ]);\r\n\r\n  return (\r\n    <MaterialTable\r\n      icons={TableIcons}\r\n      title=\" Manage Users\"\r\n      columns={columns}\r\n      data={data}\r\n      options={{\r\n        filtering: true,\r\n      }}\r\n      editable={{\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataUpdate[index] = newData;\r\n\r\n              setData([...dataUpdate]);\r\n              updateusers(\r\n                newData.user_id,\r\n                newData.full_name,\r\n                newData.email,\r\n                newData.education,\r\n                newData.contact_number,\r\n                newData.gender,\r\n                newData.citizenship,\r\n                newData.address,\r\n                newData.postalcode,\r\n                newData.country\r\n              );\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              deleteusers(oldData.user_id);\r\n              dataDelete.splice(index, 1);\r\n              setData([...dataDelete]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}