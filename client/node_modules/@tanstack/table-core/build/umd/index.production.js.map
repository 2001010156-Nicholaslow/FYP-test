{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/row.ts","../../src/core/cell.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { NoInfer, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IfDefined<T, N> = 0 extends 1 & T ? N : T extends {} ? T : N\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, table: unknown) {\n  return (updater: Updater<any>) => {\n    ;(table as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Cell,\n  Column,\n  Header,\n  TableGenerics,\n  Table,\n  Row,\n  AccessorFn,\n  ColumnDef,\n  ColumnDefTemplate,\n  RowData,\n} from '../types'\nimport { memo, UnionToIntersection } from '../utils'\nimport { CoreCell } from './cell'\nimport { CoreHeader } from './headers'\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\ntype CoreColumnDefBase<TData extends RowData> = {\n  columns?: ColumnDef<TData>[]\n  header?: ColumnDefTemplate<ReturnType<CoreHeader<TData>['getContext']>>\n  footer?: ColumnDefTemplate<ReturnType<CoreHeader<TData>['getContext']>>\n  cell?: ColumnDefTemplate<ReturnType<CoreCell<TData>['getContext']>>\n  meta?: unknown\n}\n\ntype CoreColumnDefDisplay<TData extends RowData> = CoreColumnDefBase<TData> & {\n  id: string\n}\n\ntype CoreColumnDefDisplayWithStringHeader<TData extends RowData> =\n  CoreColumnDefBase<TData> & {\n    header: string\n    id?: string\n  }\n\ntype CoreColumnDefAccessorFn<TData extends RowData> =\n  CoreColumnDefBase<TData> & {\n    accessorFn: AccessorFn<TData>\n    id: string\n    // accessorKey?: never\n  }\n\ntype CoreColumnDefAccessorKey<TData extends RowData> =\n  CoreColumnDefBase<TData> & {\n    accessorKey: keyof TData\n    id?: string\n    // accessorFn?: never\n  }\n\nexport type CoreColumnDef<TData extends RowData> =\n  | CoreColumnDefDisplay<TData>\n  | CoreColumnDefDisplayWithStringHeader<TData>\n  | CoreColumnDefAccessorFn<TData>\n  | CoreColumnDefAccessorKey<TData>\n\nexport type CoreColumnDefResolved<TData extends RowData> = Partial<\n  UnionToIntersection<CoreColumnDef<TData>>\n>\n\nexport type CoreColumn<TData extends RowData> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData>\n  columnDef: ColumnDef<TData>\n  columns: Column<TData>[]\n  parent?: Column<TData>\n  getFlatColumns: () => Column<TData>[]\n  getLeafColumns: () => Column<TData>[]\n}\n\nexport function createColumn<TData extends RowData>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData>,\n  depth: number,\n  parent?: Column<TData>\n) {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as CoreColumnDefResolved<TData>\n\n  let id =\n    resolvedColumnDef.id ??\n    resolvedColumnDef.accessorKey ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (resolvedColumnDef.accessorKey) {\n    accessorFn = (originalRow?: TData) =>\n      (originalRow as any)[resolvedColumnDef.accessorKey]\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport type CoreHeaderGroup<TData extends RowData> = {\n  id: string\n  depth: number\n  headers: Header<TData>[]\n}\n\nexport type CoreHeader<TData extends RowData> = {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => {\n    table: Table<TData>\n    header: Header<TData>\n    column: Column<TData>\n  }\n}\n\nexport type HeadersInstance<TData extends RowData> = {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData>[]\n  getLeftFlatHeaders: () => Header<TData>[]\n  getCenterFlatHeaders: () => Header<TData>[]\n  getRightFlatHeaders: () => Header<TData>[]\n\n  getLeafHeaders: () => Header<TData>[]\n  getLeftLeafHeaders: () => Header<TData>[]\n  getCenterLeafHeaders: () => Header<TData>[]\n  getRightLeafHeaders: () => Header<TData>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData>(\n  table: Table<TData>,\n  column: Column<TData>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n) {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData>[] => {\n      const leafHeaders: CoreHeader<TData>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders as Header<TData>[]\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData>[],\n  columnsToGroup: Column<TData>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingInstance = {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport type ColumnSizingColumn = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader = {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData>(\n    header: Header<TData>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column.getCanResize()\n\n        return (e: unknown) => {\n          if (!canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizingState = {}\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]!.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport type ExpandedOptions<TData extends RowData> = {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ExpandedInstance<TData extends RowData> = {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          (table.options.getRowCanExpand?.(row) ?? true) &&\n          (table.options.enableExpanding ?? true) &&\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return row.getValue(columnId)?.toLowerCase().includes(search)\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId)?.includes(filterValue)\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return row.getValue(columnId)?.toLowerCase() === filterValue.toLowerCase()\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(val => !row.getValue(columnId)?.includes(val))\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val => row.getValue(columnId)?.includes(val))\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ResolvedColumnFilter<TData extends RowData> = {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport type FilterFn<TData extends RowData> = {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: any) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | FilterFn<TData>\n\nexport type FiltersColumnDef<TData extends RowData> = {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TData extends RowData> = {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport type FiltersRow<TData extends RowData> = {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, any>\n}\n\nexport type FiltersOptions<TData extends RowData> = {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\nexport type FiltersInstance<TData extends RowData> = {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : (filterFns[\n              column.columnDef.filterFn as BuiltInFilterFn\n            ] as FilterFn<TData>)\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : (filterFns[globalFilterFn as BuiltInFilterFn] as FilterFn<TData>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      _getFilteredRowModel:\n        table.options.getFilteredRowModel &&\n        table.options.getFilteredRowModel(table),\n      getFilteredRowModel: () => {\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce(\n    (sum, next) => {\n      const nextValue = next.getValue(columnId)\n      return sum + (typeof nextValue === 'number' ? nextValue : 0)\n    },\n    0\n  )\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  TableGenerics,\n  RowData,\n} from '../types'\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type GroupingState = string[]\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport type GroupingColumnDef<TData extends RowData> = {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<ReturnType<Cell<TData>['getContext']>>\n  enableGrouping?: boolean\n}\n\nexport type GroupingColumn<TData extends RowData> = {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions = {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type GroupingInstance<TData extends RowData> = {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<TData> => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : (aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ] as AggregationFn<TData>)\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData>(\n    cell: Cell<TData>,\n    column: Column<TData>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport {\n  Table,\n  OnChangeFn,\n  Updater,\n  Column,\n  TableGenerics,\n  RowData,\n} from '../types'\n\nimport { Grouping, orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TData extends RowData> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (columns: Column<TData>[]) => Column<TData>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationInitialTableState = {\n  pagination?: Partial<PaginationState>\n}\n\nexport type PaginationOptions = {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport type PaginationInstance<TData extends RowData> = {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  TableGenerics,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningRow<TData extends RowData> = {\n  getLeftVisibleCells: () => Cell<TData>[]\n  getCenterVisibleCells: () => Cell<TData>[]\n  getRightVisibleCells: () => Cell<TData>[]\n}\n\nexport type ColumnPinningInstance<TData extends RowData> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData>[]\n  getRightLeafColumns: () => Column<TData>[]\n  getCenterLeafColumns: () => Column<TData>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TData extends RowData> = {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport type RowSelectionInstance<TData extends RowData> = {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = table.getPreFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !table.getIsAllRowsSelected() &&\n          !!Object.keys(table.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    (rowA.getValue(columnId) as Date).getTime(),\n    (rowB.getValue(columnId) as Date).getTime()\n  )\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Row,\n  Updater,\n  RowData,\n} from '../types'\n\nimport { isFunction, makeStateUpdater, Overwrite } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortingFn<TData extends RowData> = {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport type SortingColumnDef<TData extends RowData> = {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TData extends RowData> = {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\nexport type SortingOptions<TData extends RowData> = {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\nexport type SortingInstance<TData extends RowData> = {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : (sortingFns[\n              column.columnDef.sortingFn as BuiltInSortingFn\n            ] as SortingFn<TData>)\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? table.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            !nextSortingOrder // Finally, detect if it should indeed be removed\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : nextSortingOrder! === 'desc',\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: hasDescDefined ? desc! : nextSortingOrder! === 'desc',\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : nextSortingOrder! === 'desc',\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== column.id)\n          }\n\n          return newSorting\n        })\n      },\n\n      getNextSortingOrder: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        const firstSortDirection = sortDescFirst ? 'desc' : 'asc'\n\n        const isSorted = column.getIsSorted()\n        if (!isSorted) {\n          return firstSortDirection\n        }\n        if (isSorted === firstSortDirection) {\n          return isSorted === 'desc' ? 'asc' : 'desc'\n        } else {\n          return false\n        }\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  TableGenerics,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityInstance<TData extends RowData> = {\n  getVisibleFlatColumns: () => Column<TData>[]\n  getVisibleLeafColumns: () => Column<TData>[]\n  getLeftVisibleLeafColumns: () => Column<TData>[]\n  getRightVisibleLeafColumns: () => Column<TData>[]\n  getCenterVisibleLeafColumns: () => Column<TData>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n}\n\nexport type VisibilityRow<TData extends RowData> = {\n  _getAllVisibleCells: () => Cell<TData>[]\n  getVisibleCells: () => Cell<TData>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData>[]\n    ): (() => Column<TData>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { flattenBy, functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  ColumnDefTemplate,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport type TableFeature = {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport type CoreTableState = {}\n\nexport type CoreOptions<TData extends RowData> = {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: unknown\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData>[]\n  defaultColumn?: Partial<ColumnDef<TData>>\n  renderFallbackValue: any\n}\n\nexport type CoreInstance<TData extends RowData> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData>>\n  _getColumnDefs: () => ColumnDef<TData>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData>>\n  getAllColumns: () => Column<TData>[]\n  getAllFlatColumns: () => Column<TData>[]\n  getAllLeafColumns: () => Column<TData>[]\n  getColumn: (columnId: string) => Column<TData>\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TData>>\n\n        return {\n          header: props => props.header.column.id,\n          footer: props => props.header.column.id,\n          cell: props => (props.renderValue() as any)?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData>[],\n          parent?: Column<TData>,\n          depth = 0\n        ): Column<TData>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Row, TableGenerics, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport type CoreRow<TData extends RowData> = {\n  id: string\n  index: number\n  original?: TData\n  depth: number\n  _valuesCache: Record<string, any>\n  getValue: (columnId: string) => any\n  renderValue: (columnId: string) => unknown\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData | undefined,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId]\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\n\nexport type CoreCell<TData extends RowData> = {\n  id: string\n  getValue: () => any\n  renderValue: () => unknown\n  row: Row<TData>\n  column: Column<TData>\n  getContext: () => {\n    table: Table<TData>\n    column: Column<TData>\n    row: Row<TData>\n    cell: Cell<TData>\n    getValue: () => any\n    renderValue: () => any\n  }\n}\n\nexport function createCell<TData extends RowData>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData>,\n  columnId: string\n) {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: () => ({\n      table,\n      column,\n      row,\n      cell: cell as Cell<TData>,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData>\n}\n","import { createRow } from '../core/row'\nimport { TableGenerics, Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      if (row.subRows?.length) {\n        const newRow = createRow(\n          table,\n          row.id,\n          row.original,\n          row.index,\n          row.depth\n        )\n        newRow.columnFilters = row.columnFilters\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        if (!newRow.subRows.length) {\n          continue\n        }\n        row = newRow\n      }\n\n      if (filterRow(row)) {\n        rows.push(row)\n        newFilteredRowsById[row.id] = row\n        newFilteredRowsById[i] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          // Do not expand if rows are not included in pagination\n          !paginateExpandedRows ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        return expandRows(rowModel, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(\n  rowModel: RowModel<TData>,\n  table: Table<TData>\n) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i],\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        const firstValue = facetedRowModel.flatRows[0]?.getValue(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (value < facetedMinMaxValues[0]) {\n            facetedMinMaxValues[0] = value\n          } else if (value > facetedMinMaxValues[1]) {\n            facetedMinMaxValues[1] = value\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, TableGenerics, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId).getFacetedRowModel()],\n      facetedRowModel => {\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const value = facetedRowModel.flatRows[i]?.getValue(columnId)\n\n          if (facetedUniqueValues.has(value)) {\n            facetedUniqueValues.set(\n              value,\n              (facetedUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            facetedUniqueValues.set(value, 1)\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column to filter with columnId: ${d.id}`\n              )\n            }\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId: string\n        ) => {\n          // This is the last level, just return the rows\n          if (depth === existingGrouping.length) {\n            return rows\n          }\n\n          const columnId = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(table, id, undefined, index, depth)\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, TableGenerics, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().pagination, table.getPrePaginationRowModel()],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows(\n            {\n              rows,\n              flatRows,\n              rowsById,\n            },\n            table\n          )\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, TableGenerics, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id).getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.slice()\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (!row.subRows || row.subRows.length <= 1) {\n              return\n            }\n            row.subRows = sortData(row.subRows)\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","table","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorFn","id","accessorKey","header","undefined","originalRow","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","includes","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","mouseEvents","moveHandler","onMove","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","split","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","value","Array","isArray","getFilterFn","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelect","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","getTime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","setSorting","existingSorting","existingIndex","hasDescDefined","sortAction","newSorting","getCanMultiSort","enableSortingRemoval","enableMultiRemove","_table$options$maxMul","maxMultiSortColCount","_column$columnDef$sor","firstSortDirection","sortDescFirst","isSorted","getIsSorted","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","original","rowIndex","_valuesCache","hasOwnProperty","renderValue","renderFallbackValue","getLeafRows","_cell$getValue","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","filterRowModelFromRoot","expandRows","expandedRows","handleRow","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","footer","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","_facetedRowModel$flat2","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","j","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":"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"}